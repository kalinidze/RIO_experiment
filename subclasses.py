"""
subclasses.py  –  Extends the core RI ontology with rich subclass trees
and specialised properties.  Each subclass now includes label+comment.
"""

from owlready2 import *
from core import get_core_onto

# ---------------------------------------------------------------
# 1.  Load the already-built core ontology instance
# ---------------------------------------------------------------
core_onto = get_core_onto()

EXT_IRI = "http://example.org/ri/extended.owl"
ext_onto = get_ontology(EXT_IRI)

with ext_onto:
    ext_onto.imported_ontologies.append(core_onto)

    # shorthand references
    RObj, RTop, Act  = core_onto.ResearchObject, core_onto.ResearchTopic, core_onto.Activity
    CObj, Ag         = core_onto.ConceptualObject, core_onto.Agent
    RProp, Prov, Repr = core_onto.ResearchObjectProperty, core_onto.Provenance, core_onto.Representation

    # ------------------------------------------------------------
    # ResearchObject subtree
    # ------------------------------------------------------------
    class DataSet(RObj):
        """Structured collection of data for analysis or reuse."""
        label = ["Dataset"]; comment = ["Structured collection of data used in research."]

    class ExperimentalDataSet(DataSet):
        """Dataset captured from controlled experiments."""
        label = ["Experimental Dataset"]; comment = ["Data collected via controlled experimentation."]

    class ObservationalDataSet(DataSet):
        """Dataset obtained through observation without intervention."""
        label = ["Observational Dataset"]; comment = ["Data gathered by passive observation of phenomena."]

    class SimulationDataSet(DataSet):
        """Dataset generated by computational or mathematical simulation."""
        label = ["Simulation Dataset"]; comment = ["Data produced by running simulations or models."]

    class Sample(RObj):
        """Physical or digital specimen representing a larger whole."""
        label = ["Sample"]; comment = ["Material or digital specimen used in experiments."]

    class Publication(RObj):
        """Scholarly communication describing research results."""
        label = ["Publication"]; comment = ["Article, report or paper disseminating findings."]

    class Software(RObj):
        """Executable code or scripts developed for or during research."""
        label = ["Software"]; comment = ["Source code, scripts, or binaries produced in a project."]

    # ------------------------------------------------------------
    # ResearchTopic subtree
    # ------------------------------------------------------------
    class ResearchProblem(RTop):
        """Specific problem or gap the research aims to solve."""
        label = ["Research Problem"]; comment = ["Concrete issue addressed by the study."]

    class Hypothesis(RTop):
        """Proposed explanation made on limited evidence."""
        label = ["Hypothesis"]; comment = ["Testable proposition guiding an investigation."]

    class ScientificDomain(RTop):
        """Broad field or discipline of science (e.g., Physics)."""
        label = ["Scientific Domain"]; comment = ["High-level academic discipline of the research."]

    # ------------------------------------------------------------
    # Activity subtree
    # ------------------------------------------------------------
    class Experiment(Act):
        """Controlled procedure to test a hypothesis."""
        label = ["Experiment"]; comment = ["Controlled procedure investigating cause–effect."]

    class DataCollection(Act):
        """Activity that acquires raw measurements or observations."""
        label = ["Data Collection"]; comment = ["Process of gathering primary data."]

    class DataAnalysis(Act):
        """Processing data to extract meaning or insights."""
        label = ["Data Analysis"]; comment = ["Transforming and interpreting data for results."]

    class SimulationActivity(Act):
        """Running a computational model to emulate phenomena."""
        label = ["Simulation"]; comment = ["Execution of models that imitate real-world processes."]

    class Modeling(Act):
        """Formulating mathematical or conceptual representations."""
        label = ["Modeling"]; comment = ["Building abstract representations of systems."]

    class DataVisualization(Act):
        """Rendering data graphically for interpretation."""
        label = ["Data Visualization"]; comment = ["Creating visual artefacts (plots, charts) of data."]

    class PublicationActivity(Act):
        """Authoring and disseminating research outputs."""
        label = ["Publication Activity"]; comment = ["Writing, reviewing, and publishing scholarly work."]

    # ------------------------------------------------------------
    # ConceptualObject subtree
    # ------------------------------------------------------------
    class Model(CObj):
        """Abstract representation of a system or process."""
        label = ["Model"]; comment = ["Simplified abstraction representing reality."]

    class Theory(CObj):
        """Well-substantiated explanation of aspects of the world."""
        label = ["Theory"]; comment = ["System of ideas explaining phenomena."]

    class Algorithm(CObj):
        """Finite set of procedural steps for computation."""
        label = ["Algorithm"]; comment = ["Ordered steps to solve a computational task."]

    class Method(CObj):
        """Systematic approach or technique for research."""
        label = ["Method"]; comment = ["Procedure or technique applied during study."]

    class Ontology(CObj):
        """Formal specification of concepts and relations."""
        label = ["Ontology"]; comment = ["Structured vocabulary with defined relationships."]

    # ------------------------------------------------------------
    # Agent subtree
    # ------------------------------------------------------------
    class Researcher(Ag):
        """Individual conducting scientific investigation."""
        label = ["Researcher"]; comment = ["Person who performs scientific studies."]

    class Organization(Ag):
        """Institution participating in or funding research."""
        label = ["Organization"]; comment = ["Institution such as a university or company."]

    class SoftwareAgent(Ag):
        """Automated software performing tasks autonomously."""
        label = ["Software Agent"]; comment = ["Program acting on behalf of users or systems."]

    class FundingAgency(Ag):
        """Entity providing financial support for research."""
        label = ["Funding Agency"]; comment = ["Body allocating funds to projects."]

    # ------------------------------------------------------------
    # ResearchObjectProperty subtree
    # ------------------------------------------------------------
    class SizeProperty(RProp):
        """Numerical extent of a dataset or file (e.g., bytes)."""
        label = ["Size"]; comment = ["Physical or digital size of an object."]

    class FormatProperty(RProp):
        """File or media type characterising representation."""
        label = ["Format"]; comment = ["Specification of how data is encoded."]

    class AccuracyProperty(RProp):
        """Degree of correctness or error bound."""
        label = ["Accuracy"]; comment = ["Closeness of measurements to true value."]

    class LicenseProperty(RProp):
        """Legal terms dictating usage rights."""
        label = ["License"]; comment = ["Usage rights such as CC-BY-4.0."]

    # ------------------------------------------------------------
    # Provenance subtree
    # ------------------------------------------------------------
    class AcquisitionProvenance(Prov):
        """Details on how/where data was originally captured."""
        label = ["Acquisition Provenance"]; comment = ["Origin context during data capture."]

    class ProcessingProvenance(Prov):
        """Record of transformations applied to data."""
        label = ["Processing Provenance"]; comment = ["History of processing steps."]

    class VersionProvenance(Prov):
        """Track of successive versions and their changes."""
        label = ["Version Provenance"]; comment = ["Chronology of object revisions."]

    # ------------------------------------------------------------
    # Representation subtree
    # ------------------------------------------------------------
    class FileFormat(Repr):
        """Concrete file type (CSV, HDF5, etc.)."""
        label = ["File Format"]; comment = ["Defined file type holding data."]

    class CSVFormat(FileFormat):
        """Comma-separated values plaintext format."""
        label = ["CSV"]; comment = ["Plaintext tabular format with commas."]

    class HDF5Format(FileFormat):
        """Hierarchical Data Format version 5."""
        label = ["HDF5"]; comment = ["Binary container for large scientific data."]

    class Schema(Repr):
        """Logical structure describing data organisation."""
        label = ["Schema"]; comment = ["Formal structure definition of datasets."]

    class Encoding(Repr):
        """Character or binary encoding applied to data."""
        label = ["Encoding"]; comment = ["Method of representing data bits/characters."]

    # ------------------------------------------------------------
    # Specialised object properties
    # ------------------------------------------------------------
    class has_file_format(core_onto.has_representation):
        """Associates a research object with its file type."""
        domain = [RObj]; range = [FileFormat]

    class has_schema(core_onto.has_representation):
        """Associates a research object with a schema definition."""
        domain = [RObj]; range = [Schema]

    class outputs_dataset(core_onto.produces):
        """Activity outputs a dataset."""
        domain = [Act]; range = [DataSet]

    class uses_dataset(core_onto.uses):
        """Activity uses a dataset as input."""
        domain = [Act]; range = [DataSet]

    # ------------------------------------------------------------
    # Data-property specialisation
    # ------------------------------------------------------------
    class accuracy_value(DataProperty):
        """Numeric accuracy/error bound (e.g., ±0.01)."""
        domain = [AccuracyProperty]; range = [float]

# ---------------------------------------------------------------
# Save extended ontology
# ---------------------------------------------------------------
if __name__ == "__main__":
    ext_onto.save(file="ri_ontology_extended.owl", format="rdfxml")
    print("Saved extended ontology with comments to ri_ontology_extended.owl")

